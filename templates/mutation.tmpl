
// {{.Function.Name}} {{.Function.Description}}
func (c *Client) {{.Function.Name}}(ctx context.Context, vars *{{.Function.Name}}Vars, payloadQuery string) ({{.Function.ReturnPrefix}}{{.Function.ReturnType}}, error) {
	var v {{.Function.PayloadRoot}}

	err := c.Query(
		ctx,
		fmt.Sprintf(`
mutation {{.Function.OperationName}}({{range .Function.Args}}{{.GQLParamDef}}{{end}}) {
	{{.Function.OperationName}} ({{range .Function.Args}}{{.GQLArgumentDef}}{{end}}) {
		%s
		userErrors {
			{{.ErrorFields}}
		}
	}
}`, payloadQuery),
		vars,
		&v,
	)

	if err != nil {
		return {{.Function.ReturnDeref}}v.{{.Function.GoName}}, err
	}

	if len(v.{{.Function.GoName}}.{{.GoErrorFieldName}}) > 0 {
		var e error

		for _, ue := range v.{{.Function.GoName}}.{{.GoErrorFieldName}} {
			e = multierror.Append(e, ue)
		}

		return {{.Function.ReturnType}}{}, e
	}{{if .Function.ReturnDeref}}

	if v.{{.Function.GoName}} == nil {
	  return {{.Function.ReturnType}}{}, nil
	}
	
	return {{.Function.ReturnDeref}}v.{{.Function.GoName}}, nil{{end}}
}

// {{.Function.Name}}Vars variables for the {{.Function.Name}} function
type {{.Function.Name}}Vars struct {{`{`}}{{range .Function.Args}}
	// {{.GoName}} {{.Description}}
	{{.GoParamDef}}{{end}}
}
