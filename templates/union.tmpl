
// {{.GoName}}UnionType Possible types of a {{.GoName}}
type {{.GoName}}UnionType string

const ({{range .PossibleTypes}}
	// {{$.GoName}}Type{{.GoName}} a type of {{.GoName}}
	{{$.GoName}}Type{{.GoName}} {{$.GoName}}UnionType = "{{.GoName}}"{{end}}
)

// {{.GoName}} {{.Description}}
type {{.GoName}} struct {{"{"}}
	Type {{.GoName}}UnionType `json:"__typename"`
{{range .PossibleTypes}}
	// {{.GoName}} A possible type of {{.Name}}
	{{.GoName}} *{{.GoName}} `json:"{{.Name}}"`{{end}}
}

// UnmarshalJSON custom unmarshal function for {{.Name}} union type
func ({{.FirstChar}} *{{.GoName}}) UnmarshalJSON(data []byte) error {
	temp := struct {
		Type {{.GoName}}UnionType `json:"__typename"`
	}{}

	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	{{.FirstChar}}.Type = temp.Type

	switch ({{.FirstChar}}.Type) {{"{"}}{{range .PossibleTypes}}
	case {{$.GoName}}Type{{.GoName}}:
		if err := json.Unmarshal(data, &{{$.FirstChar}}.{{.GoName}}); err != nil {
			return err
		}{{end}}
	default:
		return fmt.Errorf("invalid type for {{.GoName}} '%s'; make sure '__typename' is in your query", {{.FirstChar}}.Type)
	}

	return nil
}

// MarshalJSON custom marshal function for {{.Name}} union type
func ({{.FirstChar}} {{.GoName}}) MarshalJSON() ([]byte, error) {{"{"}}{{range .PossibleTypes}}
	if {{$.FirstChar}}.{{.GoName}} != nil {
		bytes, err := json.Marshal({{$.FirstChar}}.{{.GoName}})
		if err != nil {
			return nil, err
		}
		return bytes, nil
	}
	{{end}}
	return nil, nil
}
